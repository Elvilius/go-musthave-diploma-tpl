// Code generated by MockGen. DO NOT EDIT.
// Source: orders.go

// Package mock_orders is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Elvilius/go-musthave-diploma-tpl.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockOrdersStore struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockOrderStoreMockRecorder struct {
	mock *MockOrdersStore
}

// NewMockStore creates a new mock instance.
func NewMockOrderStore(ctrl *gomock.Controller) *MockOrdersStore {
	mock := &MockOrdersStore{ctrl: ctrl}
	mock.recorder = &MockOrderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersStore) EXPECT() *MockOrderStoreMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method.
func (m *MockOrdersStore) AddNewOrder(ctx context.Context, userID uint64, orderID string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewOrder indicates an expected call of AddNewOrder.
func (mr *MockOrderStoreMockRecorder) AddNewOrder(ctx, userID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockOrdersStore)(nil).AddNewOrder), ctx, userID, orderID)
}

// GetAllOrders mocks base method.
func (m *MockOrdersStore) GetAllOrders(ctx context.Context, userID uint64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderStoreMockRecorder) GetAllOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderStoreMockRecorder)(nil).GetAllOrders), ctx, userID)
}

// GetOrder mocks base method.
func (m *MockOrdersStore) GetOrder(ctx context.Context, orderID string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderStoreMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrdersStore)(nil).GetOrder), ctx, orderID)
}

// GetPendingOrders mocks base method.
func (m *MockOrdersStore) GetPendingOrders(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingOrders", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingOrders indicates an expected call of GetPendingOrders.
func (mr *MockOrderStoreMockRecorder) GetPendingOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingOrders", reflect.TypeOf((*MockOrdersStore)(nil).GetPendingOrders), ctx)
}

// UpdateOrder mocks base method.
func (m *MockOrdersStore) UpdateOrder(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderStoreMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrdersStore)(nil).UpdateOrder), ctx, order)
}

// MockExternalOrderStatusFetcher is a mock of ExternalOrderStatusFetcher interface.
type MockExternalOrderStatusFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockExternalOrderStatusFetcherMockRecorder
}

// MockExternalOrderStatusFetcherMockRecorder is the mock recorder for MockExternalOrderStatusFetcher.
type MockExternalOrderStatusFetcherMockRecorder struct {
	mock *MockExternalOrderStatusFetcher
}

// NewMockExternalOrderStatusFetcher creates a new mock instance.
func NewMockExternalOrderStatusFetcher(ctrl *gomock.Controller) *MockExternalOrderStatusFetcher {
	mock := &MockExternalOrderStatusFetcher{ctrl: ctrl}
	mock.recorder = &MockExternalOrderStatusFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalOrderStatusFetcher) EXPECT() *MockExternalOrderStatusFetcherMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockExternalOrderStatusFetcher) GetOrder(ctx context.Context, orderNumber string) (models.ExternalOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderNumber)
	ret0, _ := ret[0].(models.ExternalOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockExternalOrderStatusFetcherMockRecorder) GetOrder(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockExternalOrderStatusFetcher)(nil).GetOrder), ctx, orderNumber)
}
